{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","require","App","useState","texto","setTexto","className","id","autoFocus","rows","cols","value","onChange","e","target","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAEIA,EAASC,EAAQ,IAkENC,MAhEf,WACE,IADa,EAuBaC,mBAtBT,mgDADJ,mBAuBNC,EAvBM,KAuBCC,EAvBD,KA6Bb,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,wDAGJ,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,wCACA,0BACEC,GAAG,SACHC,WAAS,EACTF,UAAU,QACVG,KAAK,KACLC,KAAK,KACLC,MAAOP,EACPQ,SAAU,SAACC,GACTR,EAASQ,EAAEC,OAAOH,eAK1B,sBAAKL,UAAU,WAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,2CAEF,qBAAKC,GAAG,UAAUQ,wBA/BjB,CAAEC,OAAQhB,EAAOI,gBClBba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb97ff56.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Bagde from \"react-bootstrap/Badge\";\nlet marked = require(\"marked\");\n\nfunction App() {\n  const placeholder = `# Markdown Previewer\n\n[![Markdown Previewer]( \"Markdown Previewer\")]()\n\n## FreeCodeCamp | Front End Libraries Projects\n\nA *FreeCodeCamp* challenge on using front end libraries to build a markdown previewer with the below user stories to be fulfilled:\n\n> **Required**\n> 1. I can see a \\`textarea\\` element with a corresponding \\`id=\"editor\"\\`.\n> 2.  I can see an element with a corresponding \\`id=\"preview\"\\`.\n> 3. When I enter text into the \\`#editor\\` element, the \\`#preview\\` element is updated as I type to display the content of the textarea.\n> 4. When I enter GitHub flavored markdown into the \\`#editor\\` element, the text is rendered as HTML in the \\`#preview\\` element as I type (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: https://cdnjs.com/libraries/marked).\n> 5. When my markdown previewer first loads, the default text in the \\`#editor\\` field should contain valid markdown that represents at least one of each of the following elements: a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.\n> 6. When my markdown previewer first loads, the default markdown in the \\`#editor\\` field should be rendered as HTML in the \\`#preview\\` element.\n\n> **Optional Bonus**\n> 1. When I click a link rendered by my markdown previewer, the link is opened up in a new tab (HINT: read the Marked.js docs for this one!).\n\n\\`\\`\\`                      \n   <p>Hello world! This is HTML CODE BLOCK.</p>          \n\\`\\`\\``;\n  const [texto, setTexto] = useState(placeholder);\n\n  function createMarkup() {\n    return { __html: marked(texto) };\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row mt-4\">\n        <div className=\"col text-center\">\n          <h1>Markdown Previewer</h1>\n        </div>\n      </div>\n      <div className=\"row mt-4\">\n        <div className=\"col-md-6\">\n          <div className=\"col text-center\">\n            <h2>Editor</h2>\n            <textarea\n              id=\"editor\"\n              autoFocus\n              className=\"input\"\n              rows=\"10\"\n              cols=\"35\"\n              value={texto}\n              onChange={(e) => {\n                setTexto(e.target.value);\n              }}\n            ></textarea>\n          </div>\n        </div>\n        <div className=\"col-md-6\">\n          <div className=\"col text-center\">\n            <h2>Preview</h2>\n          </div>\n          <div id=\"preview\" dangerouslySetInnerHTML={createMarkup()} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}